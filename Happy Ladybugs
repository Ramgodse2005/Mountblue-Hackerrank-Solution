# Mountblue-Hackerrank-Solution
Unique solution in java for Happy Ladybugs
import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'happyLadybugs' function below.
     *
     * The function is expected to return a STRING.
     * The function accepts STRING b as parameter.
     */

    public static String happyLadybugs(String b) {
    int n = b.length();
    int[] charCount = new int[26]; // Assuming all characters are uppercase English alphabetic letters
    boolean hasEmptyCell = false;
    boolean hasUnhappy = false;

    // Count the frequency of each character in the input string
    for (char c : b.toCharArray()) {
        if (c != '_') {
            charCount[c - 'A']++;
        } else {
            hasEmptyCell = true;
        }
    }

    // Check if all ladybugs are already happy
    for (int i = 0; i < n; i++) {
        if (b.charAt(i) != '_' &&
            (i == 0 || b.charAt(i) != b.charAt(i - 1)) &&
            (i == n - 1 || b.charAt(i) != b.charAt(i + 1))) {
            hasUnhappy = true;
            break;
        }
    }

    // If all ladybugs are already happy, return "YES"
    if (!hasUnhappy) {
        return "YES";
    }

    // Check if there is at least one empty cell
    if (hasEmptyCell) {
        for (int count : charCount) {
            if (count == 1) {
                return "NO";
            }
        }
        return "YES";
    }

    // If none of the above conditions match, return "NO"
    return "NO";
}


}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int g = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, g).forEach(gItr -> {
            try {
                int n = Integer.parseInt(bufferedReader.readLine().trim());

                String b = bufferedReader.readLine();

                String result = Result.happyLadybugs(b);

                bufferedWriter.write(result);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
